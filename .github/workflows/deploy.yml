name: Deploy Infrastructure

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches: [develop, main]  # Preview deployment on PRs
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'preview'
        type: choice
        options:
          - dev
          - preview
          - prod

env:
  PROJECT_ID: nava-labs
  REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/nava-labs/labs-asp

jobs:
  # Determine environment based on branch/trigger
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}

    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            SHOULD_DEPLOY="true"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ENVIRONMENT="preview-pr-${{ github.event.pull_request.number }}"
            SHOULD_DEPLOY="true"  # PRs deploy to isolated preview environment
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="prod"
            SHOULD_DEPLOY="true"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="dev"
            SHOULD_DEPLOY="true"
          else
            # Any other branch = preview environment with actual deployment
            ENVIRONMENT="preview"
            SHOULD_DEPLOY="true"
          fi

          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "should_deploy=${SHOULD_DEPLOY}" >> $GITHUB_OUTPUT
          echo "Environment: ${ENVIRONMENT} (deploy: ${SHOULD_DEPLOY})"

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: setup

    permissions:
      contents: read
      id-token: write

    outputs:
      browser_image: ${{ steps.images.outputs.browser_image }}
      browser_ws_proxy_image: ${{ steps.images.outputs.browser_ws_proxy_image }}
      mastra_image: ${{ steps.images.outputs.mastra_image }}
      chatbot_image: ${{ steps.images.outputs.chatbot_image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          service_account: github-actions-deploy@nava-labs.iam.gserviceaccount.com
          workload_identity_provider: projects/279889631214/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Detect project changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            browser:
              - 'playwright-mcp/**'
            proxy:
              - 'browser-ws-proxy/**'
            mastra:
              - 'Dockerfile'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'src/**'
              - 'migrations/**'
              - '.mastra/**'
            chatbot:
              - 'Dockerfile.ai-chatbot'
              - 'client/**'
            terraform:
              - 'terraform/**'

      - name: Set image tags
        id: images
        run: |
          TAG=${GITHUB_SHA:0:7}
          echo "browser_image=${ARTIFACT_REGISTRY}/browser-streaming:${TAG}" >> $GITHUB_OUTPUT
          echo "browser_ws_proxy_image=${ARTIFACT_REGISTRY}/browser-ws-proxy:${TAG}" >> $GITHUB_OUTPUT
          echo "mastra_image=${ARTIFACT_REGISTRY}/mastra-app:${TAG}" >> $GITHUB_OUTPUT
          echo "chatbot_image=${ARTIFACT_REGISTRY}/ai-chatbot:${TAG}" >> $GITHUB_OUTPUT

      - name: Check if images exist (force rebuild if missing)
        id: image_check
        run: |
          TAG=${GITHUB_SHA:0:7}
          FORCE_BUILD="false"

          # Check if any required image is missing
          if ! gcloud artifacts docker images describe ${ARTIFACT_REGISTRY}/browser-streaming:${TAG} &>/dev/null; then
            echo "browser-streaming:${TAG} not found, forcing rebuild"
            FORCE_BUILD="true"
          fi
          if ! gcloud artifacts docker images describe ${ARTIFACT_REGISTRY}/browser-ws-proxy:${TAG} &>/dev/null; then
            echo "browser-ws-proxy:${TAG} not found, forcing rebuild"
            FORCE_BUILD="true"
          fi
          if ! gcloud artifacts docker images describe ${ARTIFACT_REGISTRY}/mastra-app:${TAG} &>/dev/null; then
            echo "mastra-app:${TAG} not found, forcing rebuild"
            FORCE_BUILD="true"
          fi
          if ! gcloud artifacts docker images describe ${ARTIFACT_REGISTRY}/ai-chatbot:${TAG} &>/dev/null; then
            echo "ai-chatbot:${TAG} not found, forcing rebuild"
            FORCE_BUILD="true"
          fi

          echo "force_build=${FORCE_BUILD}" >> $GITHUB_OUTPUT

      - name: Build and push browser-streaming image
        if: steps.changes.outputs.browser == 'true' || github.event_name == 'workflow_dispatch' || steps.image_check.outputs.force_build == 'true'
        run: |
          docker build \
            -f playwright-mcp/Dockerfile \
            -t ${{ steps.images.outputs.browser_image }} \
            ./playwright-mcp
          docker push ${{ steps.images.outputs.browser_image }}

      - name: Build and push browser-ws-proxy image
        if: steps.changes.outputs.proxy == 'true' || github.event_name == 'workflow_dispatch' || steps.image_check.outputs.force_build == 'true'
        run: |
          docker build \
            -f browser-ws-proxy/Dockerfile \
            -t ${{ steps.images.outputs.browser_ws_proxy_image }} \
            ./browser-ws-proxy
          docker push ${{ steps.images.outputs.browser_ws_proxy_image }}

      - name: Build and push mastra-app image
        if: steps.changes.outputs.mastra == 'true' || github.event_name == 'workflow_dispatch' || steps.image_check.outputs.force_build == 'true'
        run: |
          docker build \
            --build-arg NODE_ENV=${{ needs.setup.outputs.environment }} \
            -f Dockerfile \
            -t ${{ steps.images.outputs.mastra_image }} \
            .
          docker push ${{ steps.images.outputs.mastra_image }}

      - name: Build and push ai-chatbot image
        if: steps.changes.outputs.chatbot == 'true' || github.event_name == 'workflow_dispatch' || steps.image_check.outputs.force_build == 'true'
        run: |
          docker build \
            --build-arg NODE_ENV=${{ needs.setup.outputs.environment }} \
            -f Dockerfile.ai-chatbot \
            -t ${{ steps.images.outputs.chatbot_image }} \
            .
          docker push ${{ steps.images.outputs.chatbot_image }}

  # Deploy infrastructure with Terraform
  terraform:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should_deploy == 'true' || github.event_name == 'pull_request'
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.tf_outputs.outputs.chatbot_url }}

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          service_account: github-actions-deploy@nava-labs.iam.gserviceaccount.com
          workload_identity_provider: projects/279889631214/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"

      - name: Check for legacy preview environment
        id: legacy_check
        run: |
          ENV="${{ needs.setup.outputs.environment }}"

          # If this is a preview-pr-N environment, check if old "preview" resources exist
          if [[ "$ENV" == preview-pr-* ]]; then
            echo "Checking for legacy 'preview' environment resources..."

            # Check if any legacy preview resources exist
            LEGACY_EXISTS="false"
            if gcloud compute instances describe app-vm-preview --zone=${{ env.REGION }}-a 2>/dev/null; then
              echo "Found legacy preview VM"
              LEGACY_EXISTS="true"
            fi

            echo "legacy_exists=${LEGACY_EXISTS}" >> $GITHUB_OUTPUT
            echo "Legacy preview environment exists: ${LEGACY_EXISTS}"
          else
            echo "legacy_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Destroy legacy preview environment (if exists)
        if: steps.legacy_check.outputs.legacy_exists == 'true'
        working-directory: ./terraform
        run: |
          echo "Destroying legacy 'preview' environment to avoid conflicts..."

          # Init with old preview state
          terraform init -reconfigure \
            -backend-config="prefix=terraform/state/preview"

          # Destroy old preview environment
          terraform destroy -auto-approve \
            -var="environment=preview" \
            -var="browser_image_url=placeholder" \
            -var="mastra_image_url=placeholder" \
            -var="chatbot_image_url=placeholder" \
            -var="browser_ws_proxy_image_url=placeholder" || echo "Destroy failed, continuing..."

          echo "Legacy preview environment destroyed"

      - name: Migrate state to environment-specific path
        run: |
          echo "Migrating shared state to environment-specific path"
          gsutil cp gs://labs-asp-terraform-state/terraform/state/default.tfstate \
                    gs://labs-asp-terraform-state/terraform/state/${{ needs.setup.outputs.environment }}/default.tfstate 2>/dev/null || \
          echo "State already exists at environment-specific path or no shared state to migrate"

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init -reconfigure \
            -backend-config="prefix=terraform/state/${{ needs.setup.outputs.environment }}"

      - name: Import existing environment resources (if they exist)
        working-directory: ./terraform
        continue-on-error: true
        run: |
          ENV="${{ needs.setup.outputs.environment }}"

          echo "Attempting to import existing resources for ${ENV}..."

          # Import service accounts
          terraform import "google_service_account.cloud_run" "projects/${{ env.PROJECT_ID }}/serviceAccounts/cloud-run-${ENV}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" || echo "Skipped: cloud_run SA"
          terraform import "google_service_account.vm" "projects/${{ env.PROJECT_ID }}/serviceAccounts/app-vm-${ENV}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" || echo "Skipped: vm SA"

          # Import firewall rules
          terraform import "google_compute_firewall.browser_mcp" "projects/${{ env.PROJECT_ID }}/global/firewalls/allow-browser-mcp-${ENV}" || echo "Skipped: browser_mcp firewall"
          terraform import "google_compute_firewall.browser_streaming" "projects/${{ env.PROJECT_ID }}/global/firewalls/allow-browser-streaming-${ENV}" || echo "Skipped: browser_streaming firewall"
          terraform import "google_compute_firewall.mastra_app" "projects/${{ env.PROJECT_ID }}/global/firewalls/allow-mastra-app-${ENV}" || echo "Skipped: mastra_app firewall"

          # Import VM (if exists)
          terraform import "google_compute_instance.app_vm" "projects/${{ env.PROJECT_ID }}/zones/${{ env.REGION }}-a/instances/app-vm-${ENV}" || echo "Skipped: VM"

          # Import Cloud Run services (if exist)
          terraform import "google_cloud_run_v2_service.ai_chatbot" "projects/${{ env.PROJECT_ID }}/locations/${{ env.REGION }}/services/ai-chatbot-${ENV}" || echo "Skipped: ai_chatbot"
          terraform import "google_cloud_run_v2_service.browser_ws_proxy" "projects/${{ env.PROJECT_ID }}/locations/${{ env.REGION }}/services/browser-ws-proxy-${ENV}" || echo "Skipped: browser_ws_proxy"

          echo "Import complete"

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=${{ needs.setup.outputs.environment }}" \
            -var="browser_image_url=${{ needs.build.outputs.browser_image }}" \
            -var="mastra_image_url=${{ needs.build.outputs.mastra_image }}" \
            -var="chatbot_image_url=${{ needs.build.outputs.chatbot_image }}" \
            -var="browser_ws_proxy_image_url=${{ needs.build.outputs.browser_ws_proxy_image }}" \
            -out=tfplan

      - name: Terraform Apply
        if: needs.setup.outputs.should_deploy == 'true'
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      # REMOVED: Automatic rollback with terraform destroy is too dangerous
      # It can destroy global resources like IAM bindings and workload identity pools
      # Manual cleanup should be done if deployment fails

      - name: Get Terraform Outputs
        if: needs.setup.outputs.should_deploy == 'true'
        working-directory: ./terraform
        id: tf_outputs
        run: |
          echo "chatbot_url=$(terraform output -raw chatbot_public_url)" >> $GITHUB_OUTPUT
          echo "vm_ip=$(terraform output -raw vm_external_ip)" >> $GITHUB_OUTPUT

      - name: Comment on PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const shouldDeploy = '${{ needs.setup.outputs.should_deploy }}' === 'true';
            const body = shouldDeploy
              ? `## Preview Deployment Complete

            Infrastructure deployed to **${{ needs.setup.outputs.environment }}** environment.

            ### Service URLs
            - **AI Chatbot**: ${{ steps.tf_outputs.outputs.chatbot_url }}
            - **Mastra API**: http://${{ steps.tf_outputs.outputs.vm_ip }}:4112
            - **Browser MCP**: http://${{ steps.tf_outputs.outputs.vm_ip }}:8931/mcp
            - **Browser Streaming**: ws://${{ steps.tf_outputs.outputs.vm_ip }}:8933`
              : `## Terraform Plan Complete

            Infrastructure changes have been planned for **${{ needs.setup.outputs.environment }}** environment.

            ### Changes
            - VM will run: browser-streaming + mastra-app containers
            - Cloud Run services: ai-chatbot, browser-ws-proxy
            - All services connect to **dev database** and **dev GCS bucket**

            **Note:** This is a plan only. Merge to deploy.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Create deployment summary
        if: needs.setup.outputs.should_deploy == 'true'
        id: summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ## Deployment Complete: ${{ needs.setup.outputs.environment }}

          ### Service URLs
          - **AI Chatbot**: ${{ steps.tf_outputs.outputs.chatbot_url }}
          - **Mastra API**: http://${{ steps.tf_outputs.outputs.vm_ip }}:4112
          - **Browser MCP**: http://${{ steps.tf_outputs.outputs.vm_ip }}:8931/mcp
          - **Browser Streaming**: ws://${{ steps.tf_outputs.outputs.vm_ip }}:8933

          ### VM Information
          - **External IP**: ${{ steps.tf_outputs.outputs.vm_ip }}
          - **Environment**: ${{ needs.setup.outputs.environment }}
          EOF

      - name: Deployment Summary (console)
        if: needs.setup.outputs.should_deploy == 'true'
        run: |
          echo "Deployment to ${{ needs.setup.outputs.environment }} complete"
          echo "Chatbot URL: ${{ steps.tf_outputs.outputs.chatbot_url }}"
          echo "VM IP: ${{ steps.tf_outputs.outputs.vm_ip }}"
          echo "Mastra API: http://${{ steps.tf_outputs.outputs.vm_ip }}:4112"
          echo "Browser MCP: http://${{ steps.tf_outputs.outputs.vm_ip }}:8931/mcp"
